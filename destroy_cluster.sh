#!/bin/bash
# Ideally, we never have any bugs in cluster delete.
# However, even in this ideal scenario, we need
# protection from a patch under review breaking cluster delete
# and filling up our tenant with undeletable resources.
# In this case call the destroy script with `-f|--force`

CONFIG=${CONFIG:-cluster_config.sh}
if [ -r "$CONFIG" ]; then
	source ./${CONFIG}
fi

ARTIFACT_DIR=clusters/${CLUSTER_NAME}

opts=$(getopt -n "$0"  -o "fi:" --long "force,infra-id:"  -- "$@")

eval set --$opts

while [[ $# -gt 0 ]]; do
    case "$1" in
        -f|--force)
            FORCE=true
            shift
            ;;

        -i|--infra-id)
            INFRA_ID=$2
            shift 2
            ;;

        *)
            break
            ;;
    esac
done

declare -r installer="${OPENSHIFT_INSTALLER:-openshift-install}"

# Remove entries from /etc/hosts and ssh config
if sudo -l sed /etc/hosts &>/dev/null; then
  sudo sed -i "/# Generated by shiftstack for $CLUSTER_NAME - Do not edit/,/# End of $CLUSTER_NAME nodes/d" /etc/hosts
fi
if [[ -w "${HOME}/.ssh/config" ]]; then
  sed -i "/# Generated by shiftstack for $CLUSTER_NAME - Do not edit/,/# End of $CLUSTER_NAME nodes/d" $HOME/.ssh/config
fi

if [ ! -z "$INFRA_ID" ]; then
    TMP_DIR=$(mktemp -d -t shiftstack-XXXXXXXXXX)
    echo "{\"clusterName\":\"$CLUSTER_NAME\",\"infraID\":\"$INFRA_ID\",\"openstack\":{\"cloud\":\"$OS_CLOUD\",\"identifier\":{\"openshiftClusterID\":\"$INFRA_ID\"}}}" > $TMP_DIR/metadata.json
fi

if [[ $FORCE == true ]]; then
    echo Destroying cluster using openstack cli
    if [ -z "$INFRA_ID" ] && [ -f $ARTIFACT_DIR/metadata.json ]; then
        # elements created by the cluster are named $CLUSTER_NAME-hash by the installer
        INFRA_ID=$(jq .infraID $ARTIFACT_DIR/metadata.json | sed "s/\"//g")
    fi

    if [ -z "$INFRA_ID" ]; then
        echo "Could not find infrastructure id."
        echo "You may specify it with -i|--infra-id option to the script."
        exit 1
    fi

    openstack server list -c ID -f value --name $INFRA_ID | xargs --no-run-if-empty openstack server delete

    openstack router remove subnet $INFRA_ID-external-router $INFRA_ID-service
    openstack router remove subnet $INFRA_ID-external-router $INFRA_ID-nodes
    # BYON
    openstack router remove subnet $INFRA_ID-router $INFRA_ID-machines-subnet

    # delete interfaces from the router
    openstack network trunk list -c Name -f value | grep $INFRA_ID | xargs --no-run-if-empty openstack network trunk delete
    openstack port list --network $INFRA_ID-openshift -c ID -f value | xargs --no-run-if-empty openstack port delete
    openstack port list --network $INFRA_ID-machines-network -c ID -f value | xargs --no-run-if-empty openstack port delete

    for suffix in external-router router; do
      # delete interfaces from the router
      PORT=$(openstack router show $INFRA_ID-$suffix -c interfaces_info -f value | cut -d '"' -f 12)
      if [ -n "$PORT" ]; then
              openstack router remove port $INFRA_ID-$suffix $PORT
      fi

      openstack router unset --external-gateway $INFRA_ID-$suffix
      openstack router delete $INFRA_ID-$suffix
    done

    # IPI network
    openstack network delete $INFRA_ID-openshift

    # UPI network
    openstack network delete $INFRA_ID-network

    # BYON
    openstack network delete $INFRA_ID-machines-network

    openstack security group delete $INFRA_ID-api
    openstack security group delete $INFRA_ID-master
    openstack security group delete $INFRA_ID-worker

    openstack server group delete $INFRA_ID-master
    openstack server group delete $INFRA_ID-worker

    for c in $(openstack container list -f value); do
        echo $c
        openstack container show $c | grep $INFRA_ID
        if [ $? -eq 0 ]; then
            CONTAINER=$c
        fi
    done

    if [ ! -z "$CONTAINER" ]; then
        openstack object list -f value $CONTAINER | xargs --no-run-if-empty openstack object delete $CONTAINER
        openstack container delete $CONTAINER
    fi
else
    echo Destroying cluster using openshift-install
    "$installer" --log-level=debug destroy cluster --dir ${TMP_DIR:-$ARTIFACT_DIR}
fi

if [ ! -z "$TMP_DIR" ]; then
    rm -rf $TMP_DIR
fi
